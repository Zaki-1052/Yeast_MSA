source("~/Documents/PythonScripts/Work/bio/yeast_analysis/scripts/visualization.R")
source("~/Documents/PythonScripts/Work/bio/yeast_analysis/scripts/hotspot_visualization.R")
source("~/Documents/PythonScripts/Work/bio/yeast_analysis/scripts/signature_visualization.R")
source("~/Documents/PythonScripts/Work/bio/yeast_analysis/scripts/scaffold_clustering_visualization.R")
source("~/Documents/PythonScripts/Work/bio/yeast_analysis/scripts/mutation_signature_visualization.R")
source("~/Documents/PythonScripts/Work/bio/yeast_analysis/scripts/integrative_visualizations.R")
source("~/Documents/PythonScripts/Work/bio/yeast_analysis/scripts/biological_interpretation.R")
source("~/Documents/PythonScripts/Work/bio/yeast_analysis/scripts/integrative_visualizations.R")
source("~/Documents/PythonScripts/Work/bio/yeast_analysis/scripts/integrative_visualizations.R")
# integrative_visualizations_fixed.R
# Load required libraries
library(ggplot2)
library(dplyr)
library(reshape2)
library(igraph)
library(network)
library(ggnetwork)
library(patchwork)
library(viridis)
# Create output directory
dir.create("results/visualizations/integrative", recursive = TRUE, showWarnings = FALSE)
#-----------------------------------------
# 1. Load all our analysis data
#-----------------------------------------
# Load clustering data
clustering_summary <- read.table("results/visualizations/clustering/clustering_summary.tsv",
header = TRUE, sep = "\t")
# Load transition/transversion data
trans_data <- read.table("results/visualizations/signatures/transition_transversion.tsv",
header = TRUE, sep = "\t")
# Load mutation frequencies
mutation_freqs <- read.table("results/visualizations/signatures/mutation_frequencies.tsv",
header = TRUE, sep = "\t")
# Get treatment scaffold information
treatments <- c("WT", "STC", "CAS", "WTA")
hotspot_scaffolds <- c()
for (treatment in treatments) {
file_path <- paste0("results/analysis/hotspots/", treatment, "_top_hotspots.txt")
if (file.exists(file_path)) {
lines <- readLines(file_path)
if (length(lines) > 1) {
scaffold <- strsplit(lines[2], "\\s+")[[1]][1]
hotspot_scaffolds <- c(hotspot_scaffolds, scaffold)
}
}
}
names(hotspot_scaffolds) <- treatments
#-----------------------------------------
# 2. Calculate treatment similarities
#-----------------------------------------
# Create a similarity matrix based on multiple metrics
similarity_matrix <- matrix(0, nrow = length(treatments), ncol = length(treatments))
rownames(similarity_matrix) <- treatments
colnames(similarity_matrix) <- treatments
# Compare treatments pairwise
for (i in 1:length(treatments)) {
for (j in 1:length(treatments)) {
if (i != j) {
# Metric 1: Similarity in clustering percentage (normalized difference)
clust_i <- clustering_summary$Percent_Clustered[clustering_summary$Treatment == treatments[i]]
clust_j <- clustering_summary$Percent_Clustered[clustering_summary$Treatment == treatments[j]]
clust_sim <- 1 - abs(clust_i - clust_j) / 100
# Metric 2: Similarity in transition percentage
trans_i <- trans_data$Percentage[trans_data$Treatment == treatments[i] &
trans_data$Mutation_Class == "Transition"]
trans_j <- trans_data$Percentage[trans_data$Treatment == treatments[j] &
trans_data$Mutation_Class == "Transition"]
if(length(trans_i) == 0) trans_i <- 0
if(length(trans_j) == 0) trans_j <- 0
trans_sim <- 1 - abs(trans_i - trans_j) / 100
# Metric 3: Similarity in mutation spectrum
# Extract mutation percentages for each treatment
mut_i <- mutation_freqs %>%
filter(Treatment == treatments[i]) %>%
select(Mutation, Percentage)
mut_j <- mutation_freqs %>%
filter(Treatment == treatments[j]) %>%
select(Mutation, Percentage)
# Calculate cosine similarity between mutation spectra
if(nrow(mut_i) > 0 && nrow(mut_j) > 0) {
mut_sim_df <- merge(mut_i, mut_j, by = "Mutation")
if(nrow(mut_sim_df) > 0) {
# Cosine similarity
cosine_sim <- sum(mut_sim_df$Percentage.x * mut_sim_df$Percentage.y) /
(sqrt(sum(mut_sim_df$Percentage.x^2)) * sqrt(sum(mut_sim_df$Percentage.y^2)))
mut_sim <- cosine_sim
} else {
mut_sim <- 0
}
} else {
mut_sim <- 0
}
# Combine metrics (equal weights for now)
similarity_matrix[i, j] <- (clust_sim + trans_sim + mut_sim) / 3
}
}
}
#-----------------------------------------
# 3. Create treatment relationship network
#-----------------------------------------
# Convert similarity matrix to a network
graph <- graph_from_adjacency_matrix(
similarity_matrix,
mode = "undirected",
weighted = TRUE,
diag = FALSE
)
# Add treatment attributes to network
V(graph)$name <- treatments
V(graph)$clustering <- clustering_summary$Percent_Clustered
V(graph)$transitions <- 0
for (i in 1:length(treatments)) {
trans_pct <- trans_data$Percentage[trans_data$Treatment == treatments[i] &
trans_data$Mutation_Class == "Transition"]
if(length(trans_pct) > 0) {
V(graph)$transitions[i] <- trans_pct
}
}
# Prepare network for plotting with ggnetwork - FIX: Use explicit function reference
net <- ggnetwork(graph, layout = igraph::layout_with_fr)
source("~/Documents/PythonScripts/Work/bio/yeast_analysis/scripts/integrative_visualizations.R")
source("~/Documents/PythonScripts/Work/bio/yeast_analysis/scripts/integrative_visualizations.R")
source("~/Documents/PythonScripts/Work/bio/yeast_analysis/scripts/biological_interpretation_figure.R")
source("~/Documents/PythonScripts/Work/bio/yeast_analysis/scripts/sequence_context_analysis.R")
source("~/Documents/PythonScripts/Work/bio/yeast_analysis/scripts/sequence_context_analysis.R")
source("~/Documents/PythonScripts/Work/bio/yeast_analysis/scripts/sequence_context_analysis.R")
source("~/Documents/PythonScripts/Work/bio/yeast_analysis/scripts/summary_document.R")
source("~/Documents/PythonScripts/Work/bio/yeast_analysis/scripts/summary_document.R")
setwd("~/Documents/PythonScripts/Work/bio/yeast_analysis/results/summary")
setwd("~/Documents/PythonScripts/Work/bio/yeast_analysis")
source("~/Documents/PythonScripts/Work/bio/yeast_analysis/yeast_analysis_summary.R")
source("~/Documents/PythonScripts/Work/bio/yeast_analysis/yeast_analysis_summary.R")
source("~/Documents/PythonScripts/Work/bio/yeast_analysis/summary_document.R")
source("~/Documents/PythonScripts/Work/bio/yeast_analysis/results/summary_document.R")
